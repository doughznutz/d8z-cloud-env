# https://github.com/google-gemini/gemini-cli/blob/main/docs/telemetry.md

receivers:
  otlp:
    protocols:
      grpc: # Enable gRPC receiver for OTLP data from Gemini CLI
        endpoint: "otel-collector:4317"
      http: # Enable HTTP receiver (optional, if you change Gemini CLI to use HTTP)
        endpoint: "otel-collector:4318"

processors:
  batch: # Batch spans, metrics, and logs to reduce export load
    send_batch_size: 100
    timeout: 10s
  attributes: # (Optional) Add/modify attributes. Example: add service.name
    actions:
      - key: service.name
        value: "gemini-cli"
        action: upsert
  memory_limiter: # Prevent OOM errors in the collector
    check_interval: 1s
    limit_mib: 200
    spike_limit_mib: 50

exporters:
  # For debugging: print received telemetry to collector logs
  debug:
    verbosity: detailed

  # Option A: Export to a file (simple, but not a database)
  # file:
  #   path: /var/lib/otel/gemini_telemetry.json

  # Option B: Export to a Jaeger instance (if you enabled the Jaeger service above)
  # otlp/jaeger:
  #   endpoint: jaeger:4317 # Use Jaeger's OTLP gRPC endpoint within the Docker network
  #   tls:
  #     insecure: true

  # Option C: Export to a custom HTTP endpoint (e.g., a simple API you write that inserts into PostgreSQL)
  # otlphttp/custom_db_logger:
  #   endpoint: http://your-custom-logger-service:8080/otel-logs # Replace with your service
  #   tls:
  #     insecure: true

  # Option D: Directly to PostgreSQL (LESS COMMON for general OTel logs, but possible for specific use cases with 'postgresql' exporter if it were available for logs)
  # The OTel Collector's `postgresql` exporter is primarily for metrics to a time-series DB,
  # not typically for general logs/traces. For logs, you'd usually use a logging solution
  # that can then persist to Postgres.

  # Example if you were using Loki for logs and wanted to store Loki data in Postgres:
  # (This requires Loki to be set up to use Postgres as its backend storage)
  # otlp/loki:
  #   endpoint: loki:3100 # Assuming Loki is running in your Docker Compose

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, attributes]
      # exporters: [logging, otlp/jaeger] # If you use Jaeger
      exporters: [debug] # Just logging for now
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch, attributes]
      exporters: [debug]
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, attributes]
      # exporters: [logging, otlp/loki] # If you use Loki
      exporters: [debug]
