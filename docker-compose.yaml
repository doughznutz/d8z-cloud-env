# The d8z-cloud-environment is a set of Docker containers to get you up and running 
# in the cloud quickly.  It utilizes simple containers that can run in a container optimized
# OS.  Included is a sample development environment with VNC, VScode and VoidEditor with
# AI Agents enabled via API_KEYS routed through a local ollama proxy server.

services:
  # Base container - builds the base image
  base:
    image: env:base
    container_name: base
    build:
      context: ./base
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    networks:
      - external_net

  # Cloud container
  cloud:
    image: env:cloud
    container_name: cloud
    build:
      context: ./cloud
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
    networks:
      - external_net

  # Docker-in-Docker container
  docker:
    image: env:docker
    container_name: docker
    build:
      context: ./docker
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    networks:
      - external_net

  # Github container
  github:
    image: env:github
    container_name: github
    build:
      context: .  # We check in the entire environment, so need visibility to .
      dockerfile: ./github/Dockerfile
    env_file: ./.env
    #volumes:
    #  - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
    networks:
      - external_net

# Development environment containers.
  # Dashboard is the front-end server at http://localhost or http://cloudhost
  dashboard:
    image: dev:dashboard
    container_name: dashboard
    build:
      context: ./dev/dashboard
    ports:
      - "80:80"     # http://localhost
    networks:
      internal_net:
      external_net: {}

  # A Docker Log watcher.
  dozzle:
    image: amir20/dozzle
    container_name: dozzle
    ports:
      - "8083:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal_net
      - external_net

# Voideditor container - VNC enabled editor with built in AI Agent
  voideditor:
    image: dev:voideditor
    container_name: voideditor
    build:
      context: ./dev/voideditor
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    privileged: true
    shm_size: "2g"
    networks:
      - internal_net  # Access via dashboard

# VNC editor - currently just emacs (no AI agent yet)
  vnc:
    image: dev:vnc
    container_name: vnc
    build:
      context: ./dev/vnc
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    networks:
      - internal_net  # Go through the dasboard.

# VSCode container - VNC enabled editor with Continue AI Agent
  vscode:
    image: dev:vscode
    container_name: vscode
    build:
      context: ./dev/vscode
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD}
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    privileged: true
    networks:
      - internal_net   # Go through the dasboard


# VS Code-server - Web based editor with Continue AI Agent
  codeserver:
    image: dev:codeserver
    container_name: codeserver
    build:
      context: ./dev/codeserver
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD}
    ports:
    #  - 8081:8080  # Access: http://localhost:8080
      - 443:8080  # Use this port in the cloud for now.
    env_file: ./.env
    volumes:
      - /home/$USER/projects/$PROJECT:/home/$USER/projects/$PROJECT
      - /var/run/docker.sock:/var/run/docker.sock # For DinD
    privileged: true
    networks:
      - internal_net
      - external_net  # The code-server has issues with the dashboard redirect.

# Ollama AI gateway service - No VNC, so pass in the keys here.
  ollama:
    image: dev:ollama
    container_name: ollama
    build:
      context: ./dev/ollama
    env_file: ./.keys
      #  - ./.env
      #  - ./.keys
    networks:
      internal_net:
      external_net: {}


# Database and DB admin.
  adminer:
    image: adminer
    ports:
      - 8082:8080
    networks:
      - internal_net
      - external_net

  postgres:
    image: dev:postgres
    container_name: postgres
    build: 
      context: ./dev/postgres
    env_file: ./.env
    volumes:
      - /home/doughznutz/AIjournal:/var/lib/postgresql/data
    networks:
      - internal_net

networks:
  internal_net:
    internal: true
  external_net:
    driver: bridge

