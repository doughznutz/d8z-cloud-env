# Define the common configuration
x-common: &common
  environment:
    - USER=${USER}
    - PASSWORD=${DOCKER_PASSWORD:-none} 
    - VNC_PASSWORD=${DOCKER_PASSWORD:-none}
    - CODE_SERVER_PASSWORD=${DOCKER_PASSWORD:-none}
    - PROJECT=d8z-cloud-env
    - DISPLAY=:1
    - RESOLUTION=2500x1500             # Desktop monitor
#    - RESOLUTION=1920x1080             # Desktop monitor
#    - RESOLUTION=1500x800               # Laptop monitor
  volumes:
    - /home/${USER}/projects/d8z-cloud-env:/home/${USER}/projects/d8z-cloud-env # Mount ourselves to fix ourselves.
    - /var/run/docker.sock:/var/run/docker.sock # Share Docker socket dind
  shm_size: "2g"

services:
  # Base container - builds the base image
  base:
    image: env:base
    container_name: base
    build:
      context: ./base
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    <<: *common # Inherit common configurations
    networks:
      - external_net

  # Docker-in-Docker container
  docker:
    image: env:docker
    container_name: docker
    build:
      context: ./docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Share Docker socket
    <<: *common # Inherit common configurations
    networks:
      - external_net

  # Github container
  github:
    image: env:github
    container_name: github
    build:
      context: .  # We check in the entire environment, so need visibility to .
      dockerfile: ./github/Dockerfile
    environment:
      - GITHUB_TOKEN=${GIT_D8Z_TOKEN:-none}
      - GITHUB_USER=${USER}
      - GITHUB_ORG=${USER}
      - GITHUB_REPO=d8z-cloud-env
    <<: *common # Inherit common configurations
    networks:
      - external_net

# Development environment containers.

  # Dashboard is the front-end server at http://localhost or http://cloudhost
  dashboard:
    image: dev:dashboard
    container_name: dashboard
    build:
      context: ./dev/dashboard
    ports:
      - "80:80"     # http://localhost
    <<: *common # Inherit common configurations
    networks:
      internal_net:
      external_net: {}

  # A Docker Log watcher.
  dozzle:
    image: amir20/dozzle
    container_name: dozzle
    ports:
      - "8083:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal_net
      - external_net

# Voideditor container - VNC enabled editor
  voideditor:
    image: dev:voideditor
    container_name: voideditor
    build:
      context: ./dev/voideditor
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    <<: *common # Inherit common configurations
    networks:
      - internal_net
      - external_net

# VNC editor - currently just emacs.
  vnc:
    image: dev:vnc
    container_name: vnc
    build:
      context: ./dev/vnc
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    <<: *common # Inherit common configurations
    networks:
      - internal_net
      - external_net

# VSCode container - VNC
  vscode:
    image: dev:vscode
    container_name: vscode
    build:
      context: ./dev/vscode
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD}
    ports:
      - 8080:8080  # Access: http://localhost:8080
    <<: *common
    networks:
      - internal_net
      - external_net  # The code-server has issues with the proxy


# VS Code-server container
  codeserver:
    image: dev:codeserver
    container_name: codeserver
    build:
      context: ./dev/codeserver
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD}
    ports:
      - 8081:8080  # Access: http://localhost:8080
    <<: *common
    networks:
      - internal_net
      - external_net  # The code-server has issues with the proxy

# Ollama AI gateway service - No VNC, so pass in the keys here.
  ollama:
    image: dev:ollama
    container_name: ollama
    build:
      context: ./dev/ollama
    environment:
      - POSTGRES_PASSWORD=${DOCKER_PASSWORD:-none}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    <<: *common # Inherit common configurations
    networks:
      internal_net:
      external_net: {}


# Database and DB admin.
  adminer:
    image: adminer
    ports:
      - 8082:8080
    networks:
      - internal_net
      - external_net

  postgres:
    image: dev:postgres
    container_name: postgres
    build: 
      context: ./dev/postgres
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${DOCKER_PASSWORD:-none}
      POSTGRES_DB: openai_logs
    #ports:
    #  - "5432:5432"
    volumes:
      - /home/doughznutz/AIjournal:/var/lib/postgresql/data
    networks:
      - internal_net


networks:
  internal_net:
    internal: true
  external_net:
    driver: bridge

