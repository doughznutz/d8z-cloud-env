# Define the common configuration
x-common: &common
  environment:
    - USER=${USER}
    - PASSWORD=${DOCKER_PASSWORD:-none} # Use environment variable or default
    - D8Z_PROJECT=env
    - DISPLAY=:1
    - RESOLUTION=2500x1500             # Desktop monitor
#    - RESOLUTION=1920x1080             # Desktop monitor
#    - RESOLUTION=1500x800               # Laptop monitor
  volumes:
    - .:/home/${USER}/projects/env # Mount ourselves to fix ourselves.
    - /var/run/docker.sock:/var/run/docker.sock # Share Docker socket dind
  shm_size: "2g"

services:
  # Base container - builds the base image
  base:
    image: env:base
    container_name: base
    build:
      context: ./base
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    <<: *common # Inherit common configurations
    networks:
      - internal_net

  # Bazel container
  bazel:
    image: env:bazel
    container_name: bazel
    build:
      context: ./bazel
    <<: *common # Inherit common configurations
    networks:
      - internal_net

  # Docker-in-Docker container
  docker:
    image: env:docker
    container_name: docker
    build:
      context: ./docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Share Docker socket
    <<: *common # Inherit common configurations
    networks:
      - internal_net

  # Github container
  github:
    image: env:github
    container_name: github
    build:
      context: .  # We check in the entire environment, so need visibility to .
      dockerfile: ./github/Dockerfile
    environment:
      - GITHUB_TOKEN=${GIT_D8Z_TOKEN:-none}
      - GITHUB_USER=${USER}
      - GITHUB_ORG=${USER}
      - GITHUB_REPO=d8z-cloud-env
    <<: *common # Inherit common configurations
    networks:
      - external_net

  # Voideditor container - VNC enabled editor
  voideditor:
    image: env:voideditor
    container_name: voideditor
    build:
      context: ./voideditor
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD:-none}
    <<: *common # Inherit common configurations
    networks:
      - internal_net
      - external_net

  # VS Code container - VNC or code-server.
  vscode:
    image: env:vscode
    container_name: vscode
    build:
      context: ./vscode
      args:
        USERNAME: ${USER}
        PASSWORD: ${DOCKER_PASSWORD}
    ports:
      - 8080:8080  # Access: http://localhost:8080
    <<: *common
    networks:
      - internal_net
      - external_net  # The code-server has issues with the proxy


  # Ollama service - No VNC, so pass in the keys here.
  ollama:
    image: env:ollama
    container_name: ollama
    build:
      context: ./ollama
    environment:
      - POSTGRES_PASSWORD=${DOCKER_PASSWORD:-none}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    <<: *common # Inherit common configurations
    networks:
      internal_net:
        aliases:
          - 127.0.0.1
      external_net: {}

  # Proxy service
  proxy:
    image: env:proxy
    container_name: proxy
    build:
      context: ./proxy
    ports:
      - "80:80"     # Dashboard
    <<: *common # Inherit common configurations
    networks:
      internal_net:
      #  aliases:
      #    - api.openai.com
      external_net: {}

  postgres:
    image: postgres
    container_name: postgres
    build: 
      context: ./postgres
    environment:
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${DOCKER_PASSWORD:-none}
      POSTGRES_DB: openai_logs
    #ports:
    #  - "5432:5432"
    volumes:
      - ${HOME}/AIjournal:/var/lib/postgresql/data
    networks:
      - internal_net

  adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8080
    networks:
      - internal_net
      - external_net

networks:
  internal_net:
    internal: true
  external_net:
    driver: bridge

